//1932 정수 삼각형
#include <iostream>
#include <algorithm>
using namespace std;

int main() {
	ios::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int n;  // 삼각형의 크기
	int res = 0; // 최대값을 저장할 변수
	cin >> n; // 삼각형의 크기 입력
	int** dp = new int* [n]; // 삼각형의 크기만큼 동적할당
	for (int i = 0; i < n; i++) {
		dp[i] = new int[i + 1];
	}

	for (int i = 0; i < n; i++) { // 삼각형의 크기만큼 반복
		for (int j = 0; j <= i; j++) {
			cin >> dp[i][j]; // 삼각형의 값을 입력
		}
	}
	for (int i = 1; i < n; i++) { // 두 번째 줄부터 마지막 줄까지 반복
		dp[i][0] += dp[i - 1][0]; // 첫 번째 값은 이전 줄의 첫 번째 값과 더함
		dp[i][i] += dp[i - 1][i - 1]; // 마지막 값은 이전 줄의 마지막 값과 더함
		for (int j = 1; j < i; j++) { // 두 번째 값부터 마지막 값 전까지 반복
			dp[i][j] += max(dp[i - 1][j - 1], dp[i - 1][j]); // 이전 줄의 j-1번째 값과 j번째 값 중 큰 값을 더함
		}
	}
	for (int i = 0; i < n; i++) { // 마지막 줄의 값 중 가장 큰 값을 res에 저장
		res = max(res, dp[n - 1][i]);
	}
	cout << res; // res 출력

	for (int i = 0; i < n; i++) { // 동적할당한 배열 해제
		delete[] dp[i];
	}
	delete[] dp;
	return 0; // 프로그램 종료
}

/*
    문제 설명: 1932 정수 삼각형
        7
      3   8
    8   1   0
  2   7   4   4
4   5   2   6   5
    위 그림은 크기가 5인 정수 삼각형의 한 모습이다. 맨 위층 7부터 시작해서 아래에 있는 수 중 하나를 선택하여 아래층으로 내려올 때,
    이제까지 선택된 수의 합이 최대가 되는 경로를 구하는 프로그램을 작성하라. 아래층에 있는 수는 현재 층에서 선택된 수의 대각선 왼쪽 또는대각선 오른쪽에
    있는 것 중에서만 선택할 수 있다. 삼각형의 크기는 1 이상 500 이하이다. 삼각형을 이루고 있는 각 수는 모두 정수이며, 범위는 0 이상 9999 이하이다.

    입력: 첫째 줄에 삼각형의 크기 n(1 ≤ n ≤ 500)이 주어지고, 둘째 줄부터 n+1번째 줄까지 정수 삼각형이 주어진다.

    출력: 첫째 줄에 합이 최대가 되는 경로에 있는 수의 합을 출력한다.

    풀이: 삼각형의 크기만큼 동적할당한 후, 삼각형의 값을 입력받는다. 두 번째 줄부터 마지막 줄까지 반복하며, 첫 번째 값은 이전 줄의 첫 번째 값과 더하고,
    마지막 값은 이전 줄의 마지막 값과 더하며, 두 번째 값부터 마지막 값 전까지 반복하며, 이전 줄의 j-1번째 값과 j번째 값 중 큰 값을 더한다.
    마지막 줄의 값 중 가장 큰 값을 res에 저장하고, res를 출력한다.
*/